// Code generated by protoc-gen-go. DO NOT EDIT.
// source: execute.proto

package edgex

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Frames               []byte   `protobuf:"bytes,1,opt,name=frames,proto3" json:"frames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_58179d2e1720ec81, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetFrames() []byte {
	if m != nil {
		return m.Frames
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "edgex.Data")
}

func init() { proto.RegisterFile("execute.proto", fileDescriptor_58179d2e1720ec81) }

var fileDescriptor_58179d2e1720ec81 = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0x4d,
	0x2e, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x4d, 0x49, 0x4f, 0xad,
	0x50, 0x92, 0xe3, 0x62, 0x71, 0x49, 0x2c, 0x49, 0x14, 0x12, 0xe3, 0x62, 0x4b, 0x2b, 0x4a, 0xcc,
	0x4d, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0xf2, 0x8c, 0x0c, 0xb8, 0xd8, 0x5d,
	0x21, 0xfa, 0x84, 0x54, 0x11, 0x4c, 0x6e, 0x3d, 0xb0, 0x6e, 0x3d, 0x90, 0x56, 0x29, 0x64, 0x8e,
	0x12, 0x43, 0x12, 0x1b, 0xd8, 0x7c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xfc, 0xcd,
	0x04, 0x70, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecuteClient is the client API for Execute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecuteClient interface {
	Execute(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
}

type executeClient struct {
	cc *grpc.ClientConn
}

func NewExecuteClient(cc *grpc.ClientConn) ExecuteClient {
	return &executeClient{cc}
}

func (c *executeClient) Execute(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/edgex.Execute/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecuteServer is the server API for Execute service.
type ExecuteServer interface {
	Execute(context.Context, *Data) (*Data, error)
}

func RegisterExecuteServer(s *grpc.Server, srv ExecuteServer) {
	s.RegisterService(&_Execute_serviceDesc, srv)
}

func _Execute_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgex.Execute/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServer).Execute(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _Execute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgex.Execute",
	HandlerType: (*ExecuteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Execute_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execute.proto",
}
